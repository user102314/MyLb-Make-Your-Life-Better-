package MyLb.BackEnd.ServiceImp;

import MyLb.BackEnd.Model.Client;
import MyLb.BackEnd.Model.Investor;
import MyLb.BackEnd.Repository.InvestorRepository;
import MyLb.BackEnd.Service.ClientService;
import MyLb.BackEnd.Service.InvestorService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.util.Optional;
import java.util.NoSuchElementException; // ‚¨ÖÔ∏è NOUVEL IMPORT N√âCESSAIRE

@Service
public class InvestorServiceImpl implements InvestorService {

    private final InvestorRepository investorRepository;
    private final ClientService clientService;

    @Autowired
    public InvestorServiceImpl(InvestorRepository investorRepository, ClientService clientService) {
        this.investorRepository = investorRepository;
        this.clientService = clientService;
    }

    @Override
    public Investor createInvestorProfile(Long clientId, Investor investorDetails) {
        // 1. V√©rifier si le Client existe et d√©baller l'Optional.
        // üö® CORRECTION : Utilisation de orElseThrow pour extraire Client ou lancer une exception.
        Client client = clientService.getClientById(clientId)
                .orElseThrow(() -> new NoSuchElementException("Client non trouv√© avec l'ID: " + clientId));

        // 2. Cr√©er l'entit√© Investor
        Investor newInvestor = new Investor();
        newInvestor.setClientId(clientId);
        newInvestor.setCinNumber(investorDetails.getCinNumber());
        newInvestor.setGradeType("Bronze"); // Grade initial par d√©faut
        newInvestor.setClient(client); // Utilise l'objet 'client' d√©ball√©

        // Mettre √† jour le r√¥le du client (tr√®s important)
        client.setRole("INVESTOR");
        clientService.saveClient(client);

        return investorRepository.save(newInvestor);
    }

    @Override
    public Optional<Investor> getInvestorByClientId(Long clientId) {
        return investorRepository.findById(clientId);
    }

    @Override
    public Investor updateInvestorGrade(Long clientId, String newGrade) {
        Investor investor = getInvestorByClientId(clientId)
                .orElseThrow(() -> new RuntimeException("Profil Investor non trouv√© pour le Client ID: " + clientId));

        investor.setGradeType(newGrade);
        return investorRepository.save(investor);
    }

    @Override
    public void deleteInvestorProfile(Long clientId) {
        investorRepository.deleteById(clientId);

        // üö® CORRECTION : Utilisation de l'Optional pour r√©cup√©rer le client de mani√®re s√©curis√©e
        Optional<Client> clientOptional = clientService.getClientById(clientId);

        // Optionnel : Revenir au r√¥le 'CIVIL' pour le client
        if (clientOptional.isPresent()) {
            Client client = clientOptional.get();
            client.setRole("CIVIL");
            clientService.saveClient(client);
        }
    }

    @Override
    public String calculateGrade(Long clientId) {
        // Logique m√©tier : Calculer le grade en fonction du montant investi, de l'anciennet√©, etc.
        return "Not Implemented";
    }
}